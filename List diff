using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        //List<int> list1 = new List<int> { 100, 200, 300 };
        //List<int> list2 = new List<int> { 110, 300, 500 };
        //List<int> list1 = new List<int> { 100, 200, 300 };
        //

        List<int> list1 = new List<int> { 100, 200,300 };
        //List<int> list2 = new List<int> { 100, 150, 250 };
        List<int> list2 = new List<int> { 199, 299, 399 };
        //List<int> list2 = new List<int> { 199, 110,150,190, 210 };

        //Dictionary<int, List<int>> matches = new Dictionary<int, List<int>>();
        Dictionary<int, int> matches = new Dictionary<int, int>();
        foreach (int num1 in list1)
        {
            int numMatches = 0;
            if (list2.Contains(num1))
            {
                numMatches=(num1);
            }
            else
            {
                int nearest = list2.OrderBy(num2 => Math.Abs(num2 - num1)).First();
                var closest = list1.OrderBy(item => Math.Abs(nearest - item));
                if(closest.Any()) 
                {
                    if(num1 == closest.First())
                    {
                        if (!matches.ContainsKey(nearest) && !matches.ContainsValue(nearest))
                        {
                            numMatches = (nearest);
                        }
                    }
                }
            }            
            matches[num1] = numMatches;
        }

        foreach (int num2 in list2)
        {
            int numMatches = 0;

            if (!list1.Contains(num2))
            {
                if (!matches.ContainsKey(num2) && !matches.ContainsValue(num2))
                {
                    matches[num2] = numMatches;
                }
            }
        }

        Console.WriteLine("Results:");
        foreach (var kvp in matches)
        {
            Console.Write($"Value: {kvp.Key}, Matches: {kvp.Value}" );
            Console.WriteLine();
        }
    }
}
