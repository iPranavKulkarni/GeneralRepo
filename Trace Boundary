[CommandMethod("TB")]

        public void TraceBoundary()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            // Select a seed point for our boundary
            PromptPointResult ppr = ed.GetPoint("\nSelect internal point: ");
            if (ppr.Status != PromptStatus.OK) return;
            // Get the objects making up our boundary
            DBObjectCollection objs = ed.TraceBoundary(ppr.Value, true);
            if (objs.Count > 0)
            {
                Transaction tr = doc.TransactionManager.StartTransaction();
                using (tr)
                {
                    // We'll add the objects to the model space
                    BlockTable bt = (BlockTable)tr.GetObject(doc.Database.BlockTableId, OpenMode.ForRead);
                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(    bt[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                    // Add our boundary objects to the drawing and
                    // collect their ObjectIds for later use

                    ObjectIdCollection ids = new ObjectIdCollection();
                    foreach (DBObject obj in objs)
                    {
                        Entity ent = obj as Entity;
                        if (ent != null)
                        {
                            ent.ColorIndex = _index;
                            ids.Add(btr.AppendEntity(ent));
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                    }
                    _index++;
                    tr.Commit();
                }
            }
        }
